<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/git/</link>
    <description>Recent content in Git on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Nov 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>清除提交到github上的账号密码</title>
      <link>https://razielez.github.io/posts/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</guid>
      <description> 一、删库 。。。。
二、使用BFG Repo-Cleaner 地址： BFG Repo-Cleaner
简单使用 #克隆副本git clone --mirror git://example.com/example.git#清理分支java -jar bfg-1.13.0.jar --replace-text pwd.txt example.gitcd example.git &amp;amp; git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive &amp;amp; git push git 取消对某个文件的track .gitignore无法对已经track的文件忽略
git rm --cached example.filesgit commitgit push </description>
    </item>
    <item>
      <title>nothing added to commit but untracked files present解决方法</title>
      <link>https://razielez.github.io/posts/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 30 May 2018 17:05:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>问题描述 $ git commit On branch master Initial commit Untracked files: .gitignore Test/ blogpost/ manage.py nothing added to commit but untracked files present 文件被追踪，但是没有被添加git中
解决 git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件
$ git add manage.py $ git add blogpost\ $ git add Test\ $ git add .gitignore </description>
    </item>
    <item>
      <title>Git问题：Everything up-to-date解决</title>
      <link>https://razielez.github.io/posts/git%E9%97%AE%E9%A2%98everything-up-to-date%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 04 Nov 2017 12:39:28 +0000</pubDate>
      <guid>https://razielez.github.io/posts/git%E9%97%AE%E9%A2%98everything-up-to-date%E8%A7%A3%E5%86%B3/</guid>
      <description>push代码时遇到提示：Everything up-to-date,无法push代码 原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。
解决 在stackoverflow有解决方案
创建分支 $ git branch newbranch#查看分支$ git branch 切换分支 $ git checkout newbranch 改动提交到新的分支 $ git add .$ git commit -a 合并到master $ git merge newbranch#查看冲突$ git diff push代码 $ git push -u origin master 删除分支 $ git branch -D newbranch 删除合并部分大写D改为小写d </description>
    </item>
    <item>
      <title>初学使用Git</title>
      <link>https://razielez.github.io/posts/%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8git/</link>
      <pubDate>Tue, 24 Oct 2017 13:27:03 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8git/</guid>
      <description>Git使用规范流程 Git是一个源码管理系统 我采取ThoughtBot的Git使用规范流程
第一步：新建分支 每次开发新功能，都应该新建一个单独的分支。
#获取主干最新代码$ git checkout master$ git pull#新建开发分支$ git checkout -b afeature 第二步：提交分支commit 分支修改后，提交commit
#all为保存所有变化(包括新建、修改和删除)$ git add --all#查看发生变动的文件。$ git status#verbose会列出diff的结果$ git commit --verbose diff是Unix系统的一个很重要的工具程序，具体见：读懂diff - 阮一峰的网络日志 第三步：撰写提交信息 提交commit时，必须给出完整扼要的提交信息。以下是一个范本：
Persent-tense summary under 50 characters*More information about commit(under 72 characters)*More information about commit(under 72 characters)http://project.management-system.com/ticket/123 第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、需要注意的问题。最后，提供对应的网址。
第四步：与主干同步 $ git fetch orgin$ git rebase orgin/master 第五步：合并commit 分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个(或最多两三个) commit，这样不仅清晰，也容易管理。</description>
    </item>
  </channel>
</rss>
