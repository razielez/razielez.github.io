<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lock on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/lock/</link>
    <description>Recent content in Lock on Razielez&#39;s Blog</description>
    <image>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 10 Aug 2019 10:39:53 +0000</lastBuildDate><atom:link href="https://razielez.github.io/tags/lock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java线程检测死锁</title>
      <link>https://razielez.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</link>
      <pubDate>Sat, 10 Aug 2019 10:39:53 +0000</pubDate>
      
      <guid>https://razielez.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</guid>
      <description>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。
Java线程中我们构造两个相互等待对方释放资源的线程就构成了死锁。
代码：
public class DeadLockSimulation { private static String A = &amp;#34;a&amp;#34;; private static String B = &amp;#34;b&amp;#34;; public static void main(String[] args) { new DeadLockSimulation().deadLock(); } private void deadLock() { Thread t1 = new Thread(new Runnable() { @Override public void run() { synchronized (A) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (B) { System.out.println(&amp;#34;t1&amp;#34;); } } } }); Thread t2 = new Thread(new Runnable() { @Override public void run() { synchronized (B) { synchronized (A) { System.</description>
    </item>
    
  </channel>
</rss>
