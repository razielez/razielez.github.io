<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>String on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/string/</link>
    <description>Recent content in String on Razielez&#39;s Blog</description>
    <image>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 15 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://razielez.github.io/tags/string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Manacher算法-最长回文串</title>
      <link>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 求解字符串最长回文串。
leetcode: 最长回文子串
样例 Input 1211daccbbabbOutput 1211accbbabbManacher算法，时间复杂度O(n), 空间复杂度O(1)。
步骤 先对s串处理转换为奇数长度的串。
s = &amp;quot;12212321&amp;quot;==&amp;gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。 即以i为原点的最大回文半径。
Manacher算法增加两个辅助变量id和mx。
id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。
mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。
最长回文子串长度 = p[i] - 1 = 5。</description>
    </item>
    
  </channel>
</rss>
