<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Database on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/database/</link>
    <description>Recent content in Database on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://razielez.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库事务</title>
      <link>https://razielez.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务 数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。
特性 事务应该具有4个属性：原子性、一致性、隔离性、持久性。
原子性（Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。
一致性（Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。
隔离性（Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。
持久性（Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。
分类 扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。
隔离级别 未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据 提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读) 可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读 串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞 隔离级别 脏读 丢失更新 不可重复读 幻读 并发模型 更新冲突检测 未提交读：Read Uncommited √ √ √ √ 悲观 × 已提交读：Read commited × × √ √ 悲观 × 可重复读：Repeatable Read × × × √ 悲观 × 可串行读：Serializable × × × × 悲观 × 接下来详细解释，假设有下面两个事务同时执行：
begin; -- 事务1 insert into table1 (somevaue); -- 随意写的伪sql update table2 set aa = aa + 1 where id = 1; commit; begin; -- 事务2 select count(*) from table1; -- 第一次读count select aa from table2 where id = 1; -- 第一次读aa -- 假设在这个点 事务1成功提交 select count(*) from table1; -- 第二次读count select aa from table2 where id = 1; -- 第二次读aa commit; 串行化不用解释了，依次执行，不会产生冲突。</description>
    </item>
  </channel>
</rss>
