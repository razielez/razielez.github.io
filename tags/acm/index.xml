<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Acm on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/acm/</link>
    <description>Recent content in Acm on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 May 2018 10:39:53 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/acm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c&#43;&#43;枚举next_premutation</title>
      <link>https://razielez.github.io/posts/c&#43;&#43;%E6%9E%9A%E4%B8%BEnext_premutation/</link>
      <pubDate>Mon, 28 May 2018 10:39:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c&#43;&#43;%E6%9E%9A%E4%B8%BEnext_premutation/</guid>
      <description>平均复杂度即为O(n) next_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；
prev_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；
示例 #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; void f(vector&amp;lt;int&amp;gt; v){ for(int i=0;i&amp;lt;v.size();i++){ cout&amp;lt;&amp;lt;v[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; } int main() { vector&amp;lt;int&amp;gt; v; v.push_back(1); v.push_back(3); v.push_back(2); cout&amp;lt;&amp;lt;&amp;#34;原排列 ： &amp;#34;; f(v); for(int i=0;i&amp;lt;10;i++){ next_permutation(v.begin(),v.end());//升序序列 或者下一个排列次序 按照字典序生成下一个序列 f(v); } //for(int i=0;i&amp;lt;5;i++){ //	prev_permutation(v.begin(),v.end());//降序 //	f(v); //} return 0; } </description>
    </item>
    <item>
      <title>c&#43;&#43; std::ios_base::sync_with_stdio 加速输入输出</title>
      <link>https://razielez.github.io/posts/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 14 May 2018 14:57:41 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>static bool sync_with_stdio( bool sync = true ); 设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。
遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。
测试 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; int main() { std::ios::sync_with_stdio(false); std::cout &amp;lt;&amp;lt; &amp;#34;a\n&amp;#34;; std::printf(&amp;#34;b\n&amp;#34;); std::cout &amp;lt;&amp;lt; &amp;#34;c\n&amp;#34;; } 输出 （环境 g++5.4.0） b c a 默认的情况下cin绑定的是cout，每次执行 &amp;laquo; 操作符的时候都要调用flush，这样会增加IO负担。
std::ios::sync_with_stdio(false); std::cin.tie(0); 参考一 ： http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
参考二 ：http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</description>
    </item>
    <item>
      <title>BFS</title>
      <link>https://razielez.github.io/posts/bfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/bfs/</guid>
      <description>入门 迷宫问题（最短路径） INPUT: 5 5SXXXX...XX.X.....XXX....G 6 6.......S..X.XXX.......X..X..XX.GX... OUPUT: 810 代码 #include &amp;lt;iostream&amp;gt; #include &amp;lt;queue&amp;gt; using namespace std; const int INF = 100000007; const int mx = 1007; typedef pair&amp;lt;int, int&amp;gt; P; char maze[mx][mx];//地图 int n, m; int sx, sy;//开始坐标 int gx, gy;//结束坐标 int d[mx][mx];//到各个位置的最短距离数组 int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};//移动向量 //（sx,sy)----&amp;gt;(gx,gy)最短路径 //无法到达就是 INF int bfs(){ queue&amp;lt;P&amp;gt; que; //初始化所有位置为INF for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ d[i][j]=INF; } } //放入起点 que.</description>
    </item>
    <item>
      <title>并查集</title>
      <link>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:19 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>题目 : L2-010. 排座位 布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。
输入格式： 输入第一行给出3个正整数：N（&amp;lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。
这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。
输出格式： 对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but&amp;hellip;”；如果他们之间只有敌对关系，则输出“No way”。
输入样例： 7 8 45 6 12 7 -11 3 13 4 16 7 -11 2 11 4 12 3 -13 45 72 37 2 输出样例： No problemOKOK but...No way /* 11 8 6 1 2 1 3 2 4 5 6 5 7 6 8 7 9 10 11 4 6 3 9 5 9 11 6 7 8 3 4 */ #include &amp;lt;iostream&amp;gt; using namespace std; int pre[100007];//节点 int enemy[1007][1007]; int find(int x) {//查找源头标号 int r = x; while (pre[r] !</description>
    </item>
    <item>
      <title>DFS</title>
      <link>https://razielez.github.io/posts/dfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/dfs/</guid>
      <description>入门 求连通块 INPUT : 1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 OUTPUT : 0122 代码 #include &amp;lt;iostream&amp;gt; using namespace std; const int mx = 10007; int n, m; char field[mx][mx];//地图 void dfs(int x, int y){ field[x][y] = &amp;#39;*&amp;#39;;//替换现在位置 //遍历8个方向 for(int dx=-1;dx&amp;lt;=1;dx++){ for(int dy=-1;dy&amp;lt;=1;dy++){ int nx=x+dx, ny=y+dy; if(0&amp;lt;=nx&amp;amp;&amp;amp;nx&amp;lt;n&amp;amp;&amp;amp;0&amp;lt;=ny&amp;amp;&amp;amp;ny&amp;lt;m&amp;amp;&amp;amp;field[nx][ny]==&amp;#39;@&amp;#39;) dfs(nx,ny); } } return ; } void solve(){ int ans=0; for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ //从@处开始遍历 if(field[i][j]==&amp;#39;@&amp;#39;){ dfs(i,j); ans++; }	} } cout&amp;lt;&amp;lt;ans; } int main() { cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; for(int i=0;i&amp;lt;n;i++){ scanf(&amp;#34;%s&amp;#34;,field[i]); }	solve(); return 0; } </description>
    </item>
    <item>
      <title>数论初步</title>
      <link>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Sun, 31 Dec 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</guid>
      <description>数论被“数学王子”高斯誉为整个数学王国的皇后
欧几里得算法 最大公约数 欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g
代码示例 //递归int gcd(int a, int b) {return b == 0 ? a : gcd(b, a % b);}//迭代int gcd(int a, int b) {while(b != 0) {int r = b;b = a % b;a = r;}return a;} 唯一分解定理 扩展欧几里得算法 题目
直线上的点。求直线ax+by+c=0上有多少整数点(x,y)满足x&amp;lt;-[x1, x2], y &amp;lt;- [y1, y2] 定理：若a和b为正整数，则存在整数x,y使得gcd(a,b)=ax+by
代码示例 void gcd(int a, int b, int&amp;amp; d, int&amp;amp; x, int&amp;amp; y) { if (!</description>
    </item>
    <item>
      <title>快速幂</title>
      <link>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Tue, 31 Oct 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>快速幂 通常算法：
int Pow(int A, int n){if(n == 0) return 1;int rslt(1);for(int i(0); i &amp;lt; n; ++i)rslt *= A;return rslt;} 其复杂度是O(n)的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如1 000 000 000这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用int来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。 举个栗子： 一般解法： A^8 = A * A * A * A * A * A * A * A 总共需要7次乘法运算
平均分解： A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2 这样我们就只需要4次乘法运算</description>
    </item>
    <item>
      <title>c&#43;&#43;的字符串与数字的转换</title>
      <link>https://razielez.github.io/posts/c&#43;&#43;%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c&#43;&#43;%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>数字转字符串 #include &amp;lt;sstream&amp;gt; double a = 123.456; string s; stringstream ss; ss &amp;lt;&amp;lt; a; ss &amp;gt;&amp;gt; s; ss.clear(); #include &amp;lt;map&amp;gt; map&amp;lt;int, char&amp;gt; m; for (int i = 0; i &amp;lt; 10; i++) { m[i] = i + &amp;#39;0&amp;#39;; } #include &amp;lt;cstdio&amp;gt; char str[10]; double a = 123.456; sprintf(str, &amp;#34;%.3lf&amp;#34;, a); char str[10]; int a=175; sprintf(str,&amp;#34;%x&amp;#34;,a);//10进制转换成16进制，如果输出大写的字母是sprintf(str,&amp;#34;%X&amp;#34;,a) 字符串转数字 #include &amp;lt;sstream&amp;gt; string s = &amp;#34;123.456&amp;#34;; double a; stringstream ss; ss &amp;lt;&amp;lt; s; ss &amp;gt;&amp;gt; a; ss.</description>
    </item>
    <item>
      <title>scanf中的正则表达式</title>
      <link>https://razielez.github.io/posts/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>调用格式: scanf(&amp;quot;&amp;lt;格式化字符串&amp;gt;&amp;quot;, &amp;lt;地址表&amp;gt;); 一、为变量赋值时表示成功读取变量的个数, &amp;lt;格式化字符串&amp;gt;与&amp;lt;地址表&amp;gt;是严格匹配的
scanf(&amp;#34;%c %c&amp;#34;, &amp;amp;a, &amp;amp;b); //函数返回值是2，并丢弃不想使用的空白符 scanf(&amp;#34;%d,%d&amp;#34;, &amp;amp;a, &amp;amp;b); //输入必须有逗号， 多个空格为一个空格 二、 %s 读取遇到空格停止读取，因此一般可以用fgets去读取字符串
scanf(&amp;#34;%[a-z]&amp;#34;, &amp;amp;str); //遇到不再a-z字符停止读取 scanf(&amp;#34;666%[0-9]&amp;#34;, &amp;amp;str); //666开头并且在0-9字符读取，不是则停止 scanf(&amp;#34;%[^\n]&amp;#34;, &amp;amp;str); //^表示求反集，即这句话不是回车一直开始读取 三、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。
scanf(&amp;#34;%c%*c, &amp;amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。 更多正则表达式语言参考
sscanf、scanf的一些示例 </description>
    </item>
  </channel>
</rss>
