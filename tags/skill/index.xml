<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Skill on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/skill/</link>
    <description>Recent content in Skill on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Jan 2019 18:16:21 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/skill/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>问卷星自动提交脚本</title>
      <link>https://razielez.github.io/posts/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 01 Jan 2019 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/</guid>
      <description>思路 分析页面结构, 问题标号: q+第几题, 问题选项: q+第几题+_第几个选项. 对一次提交进行抓包, 抓取post数据包. 对submidata进行解码得到如下. 明显看出是题号$选项号}组成的.
写python脚本构造post请求.利用X-Forwarded-For绕过服务器IP地址过滤.
import requests from time import * from random import randint for i in range(10): header = { &amp;#39;Host&amp;#39;: &amp;#39;www.wjx.cn&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&amp;#39;, &amp;#39;X-Forwarded-For&amp;#39;: str(randint(1, 255)) + &amp;#39;.&amp;#39; + str(randint(1, 255)) + &amp;#39;.&amp;#39; + str(randint(1, 255)) + &amp;#39;.&amp;#39; + str( randint(1, 255)), &amp;#39;Referer&amp;#39;: &amp;#39;https://www.wjx.cn###.aspx&amp;#39;, &amp;#39;Cookie&amp;#39;: &amp;#39;acw_tc=2f624a1f154##&amp;#39;, } print(&amp;#34;第 &amp;#34; + str(i) + &amp;#34; 提交&amp;#34; + &amp;#34; Using IP:&amp;#34; + header[&amp;#39;X-Forwarded-For&amp;#39;] + &amp;#39; to compalte this Q.</description>
    </item>
    <item>
      <title>20行代码的签到脚本(Python)</title>
      <link>https://razielez.github.io/posts/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</guid>
      <description>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。
签到脚本 import requests username = &amp;#34;####&amp;#34; password = &amp;#34;####&amp;#34; loginUrl = &amp;#34;登录路径/auth/login&amp;#34; s = requests.Session() logindata = { &amp;#39;email&amp;#39;:username, &amp;#39;passwd&amp;#39;:password, &amp;#39;remember_me&amp;#39;:&amp;#39;ture&amp;#39;, } r = s.post(loginUrl,data=logindata) r = s.get(loginUrl) checkinUrl=&amp;#34;签到的路径/user/checkin&amp;#34; rr = s.post(checkinUrl)#执行签到 rr = s.get(loginUrl) # print(rr) # print(rr._content.decode()) exit() 在Linux上定时执行这个脚本 crontab -e 进入编辑模式，设置每天8:00运行一次。 crontab的语法规范 分钟 小时 日期 月份 周 命令
00 8 * * * python /opt/checkin.py </description>
    </item>
    <item>
      <title>Django重置后台密码</title>
      <link>https://razielez.github.io/posts/django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/</guid>
      <description>emmm时间长忘记密码了
执行 $ python manage.py shell 修改 In [1]: from django.contrib.auth.models import User In [2]: user = User.objects.get(username=&amp;#39;Username&amp;#39;) In [3]: user.set_password(&amp;#39;Password&amp;#39;) In [4]: user.save() In [5]: exit() </description>
    </item>
    <item>
      <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
      <link>https://razielez.github.io/posts/ubuntu%E9%94%99%E8%AF%AF-could-not-get-lock-var-lib-dpkg-lock/</link>
      <pubDate>Tue, 15 May 2018 17:45:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/ubuntu%E9%94%99%E8%AF%AF-could-not-get-lock-var-lib-dpkg-lock/</guid>
      <description>报错信息 E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it? 解决办法 查看运行的线程 ps -A | grep apt-get # sudo kill processnumber # 关闭apt进程 我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的
终端输入 sudo rm /var/cache/apt/archives/lock sudo rm /var/lib/dpkg/lock </description>
    </item>
    <item>
      <title>Python解决字符编码问题</title>
      <link>https://razielez.github.io/posts/python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 05 May 2018 22:33:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>字符串分为unicode 和 str 两种类型
文本字符和二进制数据分别用 str 和 byte表示
#系统默认编码设置为utf-8 &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getdefultencoding &amp;#39;utf-8&amp;#39; &amp;gt;&amp;gt;&amp;gt; str 与 bytes 之间的转换可以用 encode 和从decode
&amp;gt;&amp;gt;&amp;gt; s = &amp;#34;Python测试&amp;#34; &amp;gt;&amp;gt;&amp;gt; s = s.encode() &amp;gt;&amp;gt;&amp;gt; print(s) b&amp;#39;Python\xe6\xb5\x8b\xe8\xaf\x95&amp;#39; &amp;gt;&amp;gt;&amp;gt; s = s.decode() &amp;gt;&amp;gt;&amp;gt; print(s) &amp;#39;Python测试&amp;#39; base64 &amp;gt;&amp;gt;&amp;gt; import base64 &amp;gt;&amp;gt;&amp;gt; s = &amp;#34;asdasd&amp;#34; &amp;gt;&amp;gt;&amp;gt; s = base64.b64encode(s) &amp;gt;&amp;gt;&amp;gt; print(s) &amp;gt;&amp;gt;&amp;gt; s = base64.b64decode(s) &amp;gt;&amp;gt;&amp;gt; print(s) 参考 ： https://foofish.net/how-python3-handle-charset-encoding.html</description>
    </item>
    <item>
      <title>conda常用操作(windows)</title>
      <link>https://razielez.github.io/posts/conda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 28 Oct 2017 10:22:46 +0000</pubDate>
      <guid>https://razielez.github.io/posts/conda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>管理conda 验证安装 $ conda --version 命令参阅可以用: conda &amp;ndash;help
将conda更新到最新 $ conda update conda#有最新选择yesProceed ([y]/n)? y 管理环境 创建环境 $ conda create --name snowflakes biopython#也可以指定python版本并安装Astroid和Babel$ conda create --name snowflakes python3.5 astroid babel 使用biopython创建一个snowflakes的环境
不指定目录即为默认目录/envs 使用环境 $ activate newen#切换回根目录$ deactivate 显示安装过的环境 $ conda info --envs 括号显示为当前环境 切换到另一个环境 $ activate another_environment 克隆删除环境 #克隆$ conda create --name flowers --clone snowflakes#删除$ conda remove --name flowers --all 管理Python 检查可安装的python版本 $ conda search --full-name python#列出包含python的所有包$ conda search python 安装python3环境并不覆盖python2 $ conda create --name snackes pyhton=3 包管理 看安装的包和版本列表 $ conda list 查找、安装、删除 $ conda search beautifulsoup4$ conda install --name snowflakes beautifulsoup4 #未指定位置安装在当前位置$ conda remove --name snowflakes beautifulsoup4 从Anaconda.</description>
    </item>
    <item>
      <title>Jupyter NoteBook常用快捷键</title>
      <link>https://razielez.github.io/posts/jupyter-notebook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sat, 21 Oct 2017 15:39:41 +0000</pubDate>
      <guid>https://razielez.github.io/posts/jupyter-notebook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Jupyter Notebook 有两种键盘输入模式，命令模式和编辑模式。与Vim类似。
命令模式按Esc进入，编辑模式按Enter进入
命令模式快捷键 快捷键 作用 Shift+Enter 运行本单元，选中下一个单元 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Y 单元转入代码状态 M 单元转入markdown状态 R 单元转入raw状态 Up&amp;amp;K/Down&amp;amp;J 选中上方/下方单元 Shift+K/J 连续选择上方/下方单元 A/B 在上方/下方插入新单元 x/C 剪切/复制选中单元 Shift+V/V 粘贴到上方/下方单元 Z 恢复删除的最后一个单元 DD 删除选中的单元 Shift+M 合并选中的单元 Ctrl+S/S 保存当前文件 L 开关行号 O 转换输出 Shift+O 转换输出滚动 Esc/Q 关闭页面 H 显示快捷帮助 II/00 中断/重启NOteBook内核 Shift+Space/Space 向上/下滚动 编辑模式快捷键 快捷键 作用 Tab 代码补全或者缩进 Shift+Tab 提示 Ctrl+] 向右缩进 Ctrl+[ 向左缩进 Ctrl+Shift+Z/Ctrl+Y 重做 Ctrl+up/down 跳到单元开头/末尾 Ctrl+Left/Right 跳到左边/右边一个字首 Ctrl+BackSpace/Delete 删除前面一个字 Shift+Enter 运行本单元，选中下一个单元 Ctrl+M 切换到命令模式 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Ctrl+/ 注释整行或者取消注释 </description>
    </item>
    <item>
      <title>django链接MySQL问题</title>
      <link>https://razielez.github.io/posts/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/</guid>
      <description>错误 （django.db.utils.OperationalError: (1045, &amp;#34;Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password: NO)&amp;#34;)） 环境： Django2.0 MySQL8.0.11 Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。
解决: $ mysql -u root -p mysql&amp;gt; use mysql; mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;password&amp;#39;; </description>
    </item>
  </channel>
</rss>
