<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数论 on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/%E6%95%B0%E8%AE%BA/</link>
    <description>Recent content in 数论 on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 31 Dec 2017 18:57:58 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/%E6%95%B0%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数论初步</title>
      <link>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Sun, 31 Dec 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</guid>
      <description>数论被“数学王子”高斯誉为整个数学王国的皇后
欧几里得算法 最大公约数 欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g
代码示例 //递归int gcd(int a, int b) {return b == 0 ? a : gcd(b, a % b);}//迭代int gcd(int a, int b) {while(b != 0) {int r = b;b = a % b;a = r;}return a;} 唯一分解定理 扩展欧几里得算法 题目
直线上的点。求直线ax+by+c=0上有多少整数点(x,y)满足x&amp;lt;-[x1, x2], y &amp;lt;- [y1, y2] 定理：若a和b为正整数，则存在整数x,y使得gcd(a,b)=ax+by
代码示例 void gcd(int a, int b, int&amp;amp; d, int&amp;amp; x, int&amp;amp; y) { if (!</description>
    </item>
    <item>
      <title>快速幂</title>
      <link>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Tue, 31 Oct 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>快速幂 通常算法：
int Pow(int A, int n){if(n == 0) return 1;int rslt(1);for(int i(0); i &amp;lt; n; ++i)rslt *= A;return rslt;} 其复杂度是O(n)的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如1 000 000 000这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用int来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。 举个栗子： 一般解法： A^8 = A * A * A * A * A * A * A * A 总共需要7次乘法运算
平均分解： A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2 这样我们就只需要4次乘法运算</description>
    </item>
  </channel>
</rss>
