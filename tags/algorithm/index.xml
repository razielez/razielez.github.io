<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常见排序算法实现</title>
      <link>https://razielez.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95java%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95java%E5%AE%9E%E7%8E%B0/</guid>
      <description>排序比较 快速排序 /** * 快速排序算法 */ public static void quickSort(int[] list, int left, int right) { if (left &amp;lt; right) { // 分割数组，找到分割点 int point = partition(list, left, right); // 递归调用，对左子数组进行快速排序 quickSort(list, left, point - 1); // 递归调用，对右子数组进行快速排序 quickSort(list, point + 1, right); } } /** * 分割数组，找到分割点 */ public static int partition(int[] list, int left, int right) { // 用数组的第一个元素作为基准数 int first = list[left]; while (left &amp;lt; right) { while (left &amp;lt; right &amp;amp;&amp;amp; list[right] &amp;gt;= first) { right--; } // 交换 swap(list, left, right); while (left &amp;lt; right &amp;amp;&amp;amp; list[left] &amp;lt;= first) { left++; } // 交换 swap(list, left, right); } // 返回分割点所在的位置 return left; } /** * 交换数组中两个位置的元素 */ public static void swap(int[] list, int left, int right) { int temp; if (list !</description>
    </item>
    <item>
      <title>Manacher算法-最长回文串</title>
      <link>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 求解字符串最长回文串。
leetcode: 最长回文子串
样例 Input 1211daccbbabb Output 1211accbbabb Manacher算法，时间复杂度O(n), 空间复杂度O(1)。
步骤 先对s串处理转换为奇数长度的串。
s = &amp;#34;12212321&amp;#34;==&amp;gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1 p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。 即以i为原点的最大回文半径。
Manacher算法增加两个辅助变量id和mx。
id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。
mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。
最长回文子串长度 = p[i] - 1 = 5。</description>
    </item>
    <item>
      <title>位运算笔记</title>
      <link>https://razielez.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 01 Aug 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</guid>
      <description>位运算 &amp;amp; 、|、 ^ a &amp;amp; a = a a | a = a a ^ a = 0 a &amp;amp; 0 = 0 a | 0 = a a ^ 0 = a a | ( a &amp;amp; b ) = a a &amp;amp; ( a | b ) = a a、b值交换 a ^= b; b ^= a; a ^= b; 判断奇偶（取最后一位） a &amp;amp; 1 &amp;lt;==&amp;gt; a % 2 i+1位置为1 // 1110 =&amp;gt; 1111 a |= 1 &amp;lt;&amp;lt; i i+1位置为0 // 1111 =&amp;gt; 1101a &amp;amp;= ~(1 &amp;lt;&amp;lt; i) 取出i+1位 // i = 2, 7 =&amp;gt; 4 a = a &amp;amp; (1 &amp;lt;&amp;lt; i) 删除最后的1 // 1100 =&amp;gt; 1000 a = a &amp;amp; (a-1) 在对应i+1位，插入b的对应位 a |= 1 &amp;lt;&amp;lt; i; （a的bit位置1）a &amp;amp; (b &amp;amp; 1&amp;lt;&amp;lt;i) （与b的bit位相与） 得到最高位的1 a = a |(a&amp;gt;&amp;gt;1); a = a |(a&amp;gt;&amp;gt;2); a = a |(a&amp;gt;&amp;gt;4); a = a |(a&amp;gt;&amp;gt;8); a = a |(a&amp;gt;&amp;gt;16); return (a+1)&amp;gt;&amp;gt;1; 检测一个无符号整数是否是2^n -1的形式 x&amp;amp;(x+1) 移位 在Java中正数&amp;gt;&amp;gt;等价于&amp;gt;&amp;gt;&amp;gt;，负数在内存中已补码形式保存，&amp;gt;&amp;gt;&amp;gt;表示无符号右移。</description>
    </item>
    <item>
      <title>BFS</title>
      <link>https://razielez.github.io/posts/bfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/bfs/</guid>
      <description>入门 迷宫问题（最短路径） INPUT: 5 5SXXXX...XX.X.....XXX....G 6 6.......S..X.XXX.......X..X..XX.GX... OUPUT: 810 代码 #include &amp;lt;iostream&amp;gt; #include &amp;lt;queue&amp;gt; using namespace std; const int INF = 100000007; const int mx = 1007; typedef pair&amp;lt;int, int&amp;gt; P; char maze[mx][mx];//地图 int n, m; int sx, sy;//开始坐标 int gx, gy;//结束坐标 int d[mx][mx];//到各个位置的最短距离数组 int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};//移动向量 //（sx,sy)----&amp;gt;(gx,gy)最短路径 //无法到达就是 INF int bfs(){ queue&amp;lt;P&amp;gt; que; //初始化所有位置为INF for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ d[i][j]=INF; } } //放入起点 que.</description>
    </item>
    <item>
      <title>并查集</title>
      <link>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:19 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>题目 : L2-010. 排座位 布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。
输入格式： 输入第一行给出3个正整数：N（&amp;lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。
这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。
输出格式： 对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but&amp;hellip;”；如果他们之间只有敌对关系，则输出“No way”。
输入样例： 7 8 45 6 12 7 -11 3 13 4 16 7 -11 2 11 4 12 3 -13 45 72 37 2 输出样例： No problemOKOK but...No way /* 11 8 6 1 2 1 3 2 4 5 6 5 7 6 8 7 9 10 11 4 6 3 9 5 9 11 6 7 8 3 4 */ #include &amp;lt;iostream&amp;gt; using namespace std; int pre[100007];//节点 int enemy[1007][1007]; int find(int x) {//查找源头标号 int r = x; while (pre[r] !</description>
    </item>
  </channel>
</rss>
