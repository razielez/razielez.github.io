<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>图论 on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/tags/%E5%9B%BE%E8%AE%BA/</link>
    <description>Recent content in 图论 on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Apr 2018 18:16:21 +0000</lastBuildDate>
    <atom:link href="https://razielez.github.io/tags/%E5%9B%BE%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BFS</title>
      <link>https://razielez.github.io/posts/bfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/bfs/</guid>
      <description>入门 迷宫问题（最短路径） INPUT: 5 5SXXXX...XX.X.....XXX....G 6 6.......S..X.XXX.......X..X..XX.GX... OUPUT: 810 代码 #include &amp;lt;iostream&amp;gt; #include &amp;lt;queue&amp;gt; using namespace std; const int INF = 100000007; const int mx = 1007; typedef pair&amp;lt;int, int&amp;gt; P; char maze[mx][mx];//地图 int n, m; int sx, sy;//开始坐标 int gx, gy;//结束坐标 int d[mx][mx];//到各个位置的最短距离数组 int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};//移动向量 //（sx,sy)----&amp;gt;(gx,gy)最短路径 //无法到达就是 INF int bfs(){ queue&amp;lt;P&amp;gt; que; //初始化所有位置为INF for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ d[i][j]=INF; } } //放入起点 que.</description>
    </item>
    <item>
      <title>DFS</title>
      <link>https://razielez.github.io/posts/dfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/dfs/</guid>
      <description>入门 求连通块 INPUT : 1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 OUTPUT : 0122 代码 #include &amp;lt;iostream&amp;gt; using namespace std; const int mx = 10007; int n, m; char field[mx][mx];//地图 void dfs(int x, int y){ field[x][y] = &amp;#39;*&amp;#39;;//替换现在位置 //遍历8个方向 for(int dx=-1;dx&amp;lt;=1;dx++){ for(int dy=-1;dy&amp;lt;=1;dy++){ int nx=x+dx, ny=y+dy; if(0&amp;lt;=nx&amp;amp;&amp;amp;nx&amp;lt;n&amp;amp;&amp;amp;0&amp;lt;=ny&amp;amp;&amp;amp;ny&amp;lt;m&amp;amp;&amp;amp;field[nx][ny]==&amp;#39;@&amp;#39;) dfs(nx,ny); } } return ; } void solve(){ int ans=0; for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ //从@处开始遍历 if(field[i][j]==&amp;#39;@&amp;#39;){ dfs(i,j); ans++; }	} } cout&amp;lt;&amp;lt;ans; } int main() { cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; for(int i=0;i&amp;lt;n;i++){ scanf(&amp;#34;%s&amp;#34;,field[i]); }	solve(); return 0; } </description>
    </item>
  </channel>
</rss>
