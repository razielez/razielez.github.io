<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Razielez&#39;s Blog</title>
    <link>https://razielez.github.io/posts/</link>
    <description>Recent content in Posts on Razielez&#39;s Blog</description>
    <image>
      <title>Razielez&#39;s Blog</title>
      <url>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://razielez.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Oct 2021 12:49:26 +0800</lastBuildDate>
    <atom:link href="https://razielez.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jdk编译记录</title>
      <link>https://razielez.github.io/posts/jdk%E7%BC%96%E8%AF%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 03 Oct 2021 12:49:26 +0800</pubDate>
      <guid>https://razielez.github.io/posts/jdk%E7%BC%96%E8%AF%91%E8%AE%B0%E5%BD%95/</guid>
      <description>编译环境 操作系统： macOS Big Sur 11.4 20F71 x86_64 CPU架构： x86 BootStrap: zulu17.28.13-ca-jdk17.0.0-macosx_x64 编译版本： https://github.com/openjdk/jdk
下载jdk源码 git clone https://git.openjdk.java.net/jdk/
根据发布版本记录切换到 jdk17-ga版本
git checkout jdk-17-ga 运行配置 构建之前彻底清空上一次编译结果
make dist-clean 配置 BootStrap JDK。编译jdk17需要jdk17，下载已经编译好的jdk作为BootStrap JDK 同一个终端下配置JAVA_HOME
export JAVA_HOME=${jdk17 home} 最后执行bash configure， 处理WARN等日志
成功结果
Configuration summary: * Name: macosx-x86_64-server-release * Debug level: release * HS debug level: product * JVM variants: server * JVM features: server: &amp;#39;cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc&amp;#39; * OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64 * Version string: 17-internal+0-adhoc.</description>
    </item>
    <item>
      <title>对IDEA调优</title>
      <link>https://razielez.github.io/posts/%E4%B8%80%E6%AC%A1%E5%AF%B9idea%E7%9A%84%E8%B0%83%E4%BC%98/</link>
      <pubDate>Fri, 25 Oct 2019 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E4%B8%80%E6%AC%A1%E5%AF%B9idea%E7%9A%84%E8%B0%83%E4%BC%98/</guid>
      <description>工具 jps jstat -gcutil 9448 1000 jconsole.exe IDEA调优后的参数 -server -Xms3g -Xmx3g -XX:NewRatio=5 -Xss16m -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:ConcGCThreads=4 -XX:ReservedCodeCacheSize=512m -XX:+TieredCompilation -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow 相关参数介绍 # custom IntelliJ IDEA VM options ##################JVM模式############################ # IDEA的JVM以Server模式启动（新生代默认使用ParNew） -server ##################内存分配############################ # 堆初始值占用3G，意味着IDEA启动即分配3G内存 -Xms3g # 堆最大值占用3G -Xmx3g # 强制JVM在启动时申请到足够的堆内存（否则IDEA启动时堆初始大小不足3g） -XX:+AlwaysPreTouch # 年轻代与老年代比例为1:3（默认值是1:4），降低年轻代的回收频率 -XX:NewRatio=3 # 栈帧大小为16m -Xss16m ##################老年代回收器############################ # 使用CMS老年代回收器 -XX:+UseConcMarkSweepGC # CMS的重新标记步骤：多线程一起执行 -XX:+CMSParallelRemarkEnabled # CMS的并发标记步骤：启用4个线程并发标记（理论上越多越好，前提是CPU核心足够多） -XX:ConcGCThreads=4 ##################JIT编译器############################ # 代码缓存，用于存放Just In Time编译后的本地代码，如果塞满，JVM将只解释执行，不再编译native代码。 -XX:ReservedCodeCacheSize=512m # 分层编译，JIT编译优化越来越好，IDEA运行时间越久越快 -XX:+TieredCompilation # 节省64位指针占用的空间，代价是JVM额外开销 -XX:+UseCompressedOops # 增大软引用在JVM中的存活时长（堆空闲空间越大越久） -XX:SoftRefLRUPolicyMSPerMB=50 -Dsun.</description>
    </item>
    <item>
      <title>SQL练习题</title>
      <link>https://razielez.github.io/posts/%E5%87%A0%E9%81%93sql%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Tue, 15 Oct 2019 23:15:47 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%87%A0%E9%81%93sql%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <description>闲着没事情做几道SQL题。 Orcal SQL: 在线SQL测试
MySQL指定进入某个端口命令
mysql -uroot -p -P 3307 问题描述 1.学生表 Student(SID,Sname,Sage,Ssex) &amp;ndash;SID 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别. 2.课程表 Course(CID,Cname,TID) &amp;ndash;CID &amp;ndash;课程编号,Cname 课程名称,TID 教师编号. 3.教师表 Teacher(TID,Tname) &amp;ndash;TID 教师编号,Tname 教师姓名. 4.成绩表 SC(SID,CID,score) &amp;ndash;SID 学生编号,CID 课程编号,score 分数. 建表语句:
create table Student(SID varchar(10),Sname nvarchar(10),Sage datetime,Ssex nvarchar(10)); insert into Student values(&amp;#39;01&amp;#39; , &amp;#39;赵雷&amp;#39; , &amp;#39;1990-01-01&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;02&amp;#39; , &amp;#39;钱电&amp;#39; , &amp;#39;1990-12-21&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;03&amp;#39; , &amp;#39;孙风&amp;#39; , &amp;#39;1990-05-20&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;04&amp;#39; , &amp;#39;李云&amp;#39; , &amp;#39;1990-08-06&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;05&amp;#39; , &amp;#39;周梅&amp;#39; , &amp;#39;1991-12-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;06&amp;#39; , &amp;#39;吴兰&amp;#39; , &amp;#39;1992-03-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;07&amp;#39; , &amp;#39;郑竹&amp;#39; , &amp;#39;1989-07-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;08&amp;#39; , &amp;#39;王菊&amp;#39; , &amp;#39;1990-01-20&amp;#39; , &amp;#39;女&amp;#39;); create table Course(CID varchar(10),Cname nvarchar(10),TID varchar(10)); insert into Course values(&amp;#39;01&amp;#39; , &amp;#39;语文&amp;#39; , &amp;#39;02&amp;#39;); insert into Course values(&amp;#39;02&amp;#39; , &amp;#39;数学&amp;#39; , &amp;#39;01&amp;#39;); insert into Course values(&amp;#39;03&amp;#39; , &amp;#39;英语&amp;#39; , &amp;#39;03&amp;#39;); create table Teacher(TID varchar(10),Tname nvarchar(10)); insert into Teacher values(&amp;#39;01&amp;#39; , &amp;#39;张三&amp;#39;); insert into Teacher values(&amp;#39;02&amp;#39; , &amp;#39;李四&amp;#39;); insert into Teacher values(&amp;#39;03&amp;#39; , &amp;#39;王五&amp;#39;); create table SC(SID varchar(10),CID varchar(10),score decimal(18,1)); insert into SC values(&amp;#39;01&amp;#39; , &amp;#39;01&amp;#39; , 80); insert into SC values(&amp;#39;01&amp;#39; , &amp;#39;02&amp;#39; , 90); insert into SC values(&amp;#39;01&amp;#39; , &amp;#39;03&amp;#39; , 99); insert into SC values(&amp;#39;02&amp;#39; , &amp;#39;01&amp;#39; , 70); insert into SC values(&amp;#39;02&amp;#39; , &amp;#39;02&amp;#39; , 60); insert into SC values(&amp;#39;02&amp;#39; , &amp;#39;03&amp;#39; , 80); insert into SC values(&amp;#39;03&amp;#39; , &amp;#39;01&amp;#39; , 80); insert into SC values(&amp;#39;03&amp;#39; , &amp;#39;02&amp;#39; , 80); insert into SC values(&amp;#39;03&amp;#39; , &amp;#39;03&amp;#39; , 80); insert into SC values(&amp;#39;04&amp;#39; , &amp;#39;01&amp;#39; , 50); insert into SC values(&amp;#39;04&amp;#39; , &amp;#39;02&amp;#39; , 30); insert into SC values(&amp;#39;04&amp;#39; , &amp;#39;03&amp;#39; , 20); insert into SC values(&amp;#39;05&amp;#39; , &amp;#39;01&amp;#39; , 76); insert into SC values(&amp;#39;05&amp;#39; , &amp;#39;02&amp;#39; , 87); insert into SC values(&amp;#39;06&amp;#39; , &amp;#39;01&amp;#39; , 31); insert into SC values(&amp;#39;06&amp;#39; , &amp;#39;03&amp;#39; , 34); insert into SC values(&amp;#39;07&amp;#39; , &amp;#39;02&amp;#39; , 89); insert into SC values(&amp;#39;07&amp;#39; , &amp;#39;03&amp;#39; , 98); 题目 查询&amp;quot;01&amp;quot;课程比&amp;quot;02&amp;quot;课程成绩高的学生的信息及课程分数 查询同时存在&amp;quot;01&amp;quot;课程和&amp;quot;02&amp;quot;课程的情况 结果: +------+-------+---------------------+------+------------+------------+ | SID | Sname | Sage | Ssex | 01课程分数 | 02课程分数 | +------+-------+---------------------+------+------------+------------+ | 02 | 钱电 | 1990-12-21 00:00:00 | 男 | 70.</description>
    </item>
    <item>
      <title>Java线程检测死锁</title>
      <link>https://razielez.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</link>
      <pubDate>Sat, 10 Aug 2019 10:39:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</guid>
      <description>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。
Java线程中我们构造两个相互等待对方释放资源的线程就构成了死锁。
代码：
public class DeadLockSimulation { private static String A = &amp;#34;a&amp;#34;; private static String B = &amp;#34;b&amp;#34;; public static void main(String[] args) { new DeadLockSimulation().deadLock(); } private void deadLock() { Thread t1 = new Thread(new Runnable() { @Override public void run() { synchronized (A) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (B) { System.out.println(&amp;#34;t1&amp;#34;); } } } }); Thread t2 = new Thread(new Runnable() { @Override public void run() { synchronized (B) { synchronized (A) { System.</description>
    </item>
    <item>
      <title>Java两个线程之间共享数据</title>
      <link>https://razielez.github.io/posts/java%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/java%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/</guid>
      <description>Java里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：可见性和有序性原子性。
Java 内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题，理想情况下我们希望做到“同步”和“互斥”。
有以下常规实现方法：
一、数据抽象成一个类，对数据操作的方法封装在类里
public class MyData1 { private int j = 0; public static void main(String[] args) { MyData1 data = new MyData1(); AddRunnable addRunnable = new AddRunnable(data); DecRunnable decRunnable = new DecRunnable(data); new Thread(addRunnable).start(); new Thread(decRunnable).start(); } public synchronized void add() { j++; System.out.println(&amp;#34;线程：&amp;#34; + Thread.currentThread().getName() + &amp;#34; j为：&amp;#34; + j); } public synchronized void dec() { j--; System.out.println(&amp;#34;线程：&amp;#34; + Thread.currentThread().getName() + &amp;#34; j为：&amp;#34; + j); } public int getData() { return j; } } class AddRunnable implements Runnable { MyData1 data1 = new MyData1(); public AddRunnable(MyData1 data1) { this.</description>
    </item>
    <item>
      <title>Java基础复习（一）</title>
      <link>https://razielez.github.io/posts/java%E5%A4%8D%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Wed, 01 May 2019 10:39:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/java%E5%A4%8D%E4%B9%A0%E4%B8%80/</guid>
      <description>Java基础 面向对象六原则一法则 单一职责原则（Single-Resposibility Principle） 一个类只做它该做的事情。（单一职责原则想表达的就是&amp;quot;高内聚&amp;quot;，写代码最终极的原则只有六个字&amp;quot;高内聚、低耦合&amp;quot;，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）。
开放封闭原则（Open-Closed principle） 软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1. 抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2. 封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性）
Liskov替换原则（Liskov-Substituion Principle） 里氏替换原则，任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）
依赖倒置原则（Dependecy-Inversion Principle） 面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）
接口隔离原则（Interface-Segregation Principle） 接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、 分离的手段主要有以下两种：1. 委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2. 多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。
合成聚合复用原则 优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）
迪米特法则 迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。
Java如何实现的平台无关 Java语言规范 通过规定Java语言中基本数据类型的取值范围和行为 Class文件 所有Java文件要编译成统一的Class文件 Java虚拟机 通过Java虚拟机将Class文件转成对应平台的二进制文件等 JVM支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala）
值传递、引用传递 Java中只有值传递
public class Main { public static void main(String[] args) { int a = 10; Integer b = 20; int[] arr = {1, 2}; swap(a, b); System.out.println(String.format(&amp;#34;a:%d b:%d&amp;#34;, a, b)); swap(arr); System.out.println(Arrays.toString(arr)); } // 对于对象而言传递的是对象引用的地址作为值 static void swap(int a, Integer b) { int t = a; a = b; b = t; } static void swap(int[] arr) { arr[0] = 996; } } /** OutPut: a:10 b:20 [996, 2] **/ 值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 成员变量和方法作用域 作用域 当前类 同package 子孙类 不同package public √ √ √ √ protected √ √ √ × fridendly(默认) √ √ × × private √ × × × 例子：protected在其子类中可以访问，无论是子类内部还是子类的实例，无论它们是在哪个包中, 但如果子类与父类不在同一个包中，在子类中用父类的实例去访问的话不可以。</description>
    </item>
    <item>
      <title>设计模式复习</title>
      <link>https://razielez.github.io/posts/%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Mon, 01 Apr 2019 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%A4%8D%E4%B9%A0/</guid>
      <description>设计模式复习 23种设计模式主要分为三类：创建型模式、结构型模式、行为型模式。
创建型模式 单例模式 实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。
代码实现 饿汉式 线程安全 class Singleton { private static Singleton instance = new Singleton(); private Singleton() {} public static Singleton getInstance() { return instance; } } 懒汉式 双向检查锁定 class Singleton { // volatile 多线程安全, 但屏蔽Java虚拟机优化, 效率降低 private volatile static Singleton instance = null; private Singleton() {} public static Singleton getInstance() { if (instance == null) { // 锁定代码块 synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } } 使用静态内部类实现 // IoDH 初始化不会失败使用, 延迟加载 public class Singleton { private static class SingletonHolder { private static final Singleton instance = new Singleton(); } public static Singleton getInstance(){ return SingletonHolder.</description>
    </item>
    <item>
      <title>常见排序算法实现</title>
      <link>https://razielez.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95java%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95java%E5%AE%9E%E7%8E%B0/</guid>
      <description>排序比较 快速排序 /** * 快速排序算法 */ public static void quickSort(int[] list, int left, int right) { if (left &amp;lt; right) { // 分割数组，找到分割点 int point = partition(list, left, right); // 递归调用，对左子数组进行快速排序 quickSort(list, left, point - 1); // 递归调用，对右子数组进行快速排序 quickSort(list, point + 1, right); } } /** * 分割数组，找到分割点 */ public static int partition(int[] list, int left, int right) { // 用数组的第一个元素作为基准数 int first = list[left]; while (left &amp;lt; right) { while (left &amp;lt; right &amp;amp;&amp;amp; list[right] &amp;gt;= first) { right--; } // 交换 swap(list, left, right); while (left &amp;lt; right &amp;amp;&amp;amp; list[left] &amp;lt;= first) { left++; } // 交换 swap(list, left, right); } // 返回分割点所在的位置 return left; } /** * 交换数组中两个位置的元素 */ public static void swap(int[] list, int left, int right) { int temp; if (list !</description>
    </item>
    <item>
      <title>问卷星自动提交脚本</title>
      <link>https://razielez.github.io/posts/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 01 Jan 2019 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/</guid>
      <description>思路 分析页面结构, 问题标号: q+第几题, 问题选项: q+第几题+_第几个选项. 对一次提交进行抓包, 抓取post数据包. 对submidata进行解码得到如下. 明显看出是题号$选项号}组成的.
写python脚本构造post请求.利用X-Forwarded-For绕过服务器IP地址过滤.
import requests from time import * from random import randint for i in range(10): header = { &amp;#39;Host&amp;#39;: &amp;#39;www.wjx.cn&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&amp;#39;, &amp;#39;X-Forwarded-For&amp;#39;: str(randint(1, 255)) + &amp;#39;.&amp;#39; + str(randint(1, 255)) + &amp;#39;.&amp;#39; + str(randint(1, 255)) + &amp;#39;.&amp;#39; + str( randint(1, 255)), &amp;#39;Referer&amp;#39;: &amp;#39;https://www.wjx.cn###.aspx&amp;#39;, &amp;#39;Cookie&amp;#39;: &amp;#39;acw_tc=2f624a1f154##&amp;#39;, } print(&amp;#34;第 &amp;#34; + str(i) + &amp;#34; 提交&amp;#34; + &amp;#34; Using IP:&amp;#34; + header[&amp;#39;X-Forwarded-For&amp;#39;] + &amp;#39; to compalte this Q.</description>
    </item>
    <item>
      <title>Manacher算法-最长回文串</title>
      <link>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</guid>
      <description>题目 求解字符串最长回文串。
leetcode: 最长回文子串
样例 Input 1211daccbbabb Output 1211accbbabb Manacher算法，时间复杂度O(n), 空间复杂度O(1)。
步骤 先对s串处理转换为奇数长度的串。
s = &amp;#34;12212321&amp;#34;==&amp;gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1 p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。 即以i为原点的最大回文半径。
Manacher算法增加两个辅助变量id和mx。
id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。
mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。
最长回文子串长度 = p[i] - 1 = 5。</description>
    </item>
    <item>
      <title>清除提交到github上的账号密码</title>
      <link>https://razielez.github.io/posts/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</guid>
      <description> 一、删库 。。。。
二、使用BFG Repo-Cleaner 地址： BFG Repo-Cleaner
简单使用 #克隆副本git clone --mirror git://example.com/example.git#清理分支java -jar bfg-1.13.0.jar --replace-text pwd.txt example.gitcd example.git &amp;amp; git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive &amp;amp; git push git 取消对某个文件的track .gitignore无法对已经track的文件忽略
git rm --cached example.filesgit commitgit push </description>
    </item>
    <item>
      <title>Java8 Stream</title>
      <link>https://razielez.github.io/posts/java8-stream/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/java8-stream/</guid>
      <description>代码示例： public class Java8Stream { public static void main(String args[]) { System.out.println(&amp;#34;使用 Java 7: &amp;#34;); // 计算空字符串 List&amp;lt;String&amp;gt; strings = Arrays.asList(&amp;#34;abc&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;bc&amp;#34;, &amp;#34;efg&amp;#34;, &amp;#34;abcd&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;jkl&amp;#34;); System.out.println(&amp;#34;列表: &amp;#34; + strings); long count = getCountEmptyStringUsingJava7(strings); System.out.println(&amp;#34;空字符数量为: &amp;#34; + count); count = getCountLength3UsingJava7(strings); System.out.println(&amp;#34;字符串长度为 3 的数量为: &amp;#34; + count); // 删除空字符串 List&amp;lt;String&amp;gt; filtered = deleteEmptyStringsUsingJava7(strings); System.out.println(&amp;#34;筛选后的列表: &amp;#34; + filtered); // 删除空字符串，并使用逗号把它们合并起来 String mergedString = getMergedStringUsingJava7(strings, &amp;#34;, &amp;#34;); System.out.println(&amp;#34;合并字符串: &amp;#34; + mergedString); List&amp;lt;Integer&amp;gt; numbers = Arrays.</description>
    </item>
    <item>
      <title>Java8 Date AND Time API</title>
      <link>https://razielez.github.io/posts/java8-date-time-api/</link>
      <pubDate>Fri, 05 Oct 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/java8-date-time-api/</guid>
      <description>Java8 引入了新的时间类 使用 LocalDate 和 LocalTime 创建 LocalDate 对象并读取值
//2013-03-06 LocalDate date = LocalDate.of(2012,03,06); //2012 int year = date.getYear(); //MARCH Month month = date.getMonth(); //TUESDAY DayOfWeek dow = date.getDayOfWeek(); //6 int day = date.getDayOfMonth(); //31 int len = date.lengthOfMonth(); //false boolean leap = date.isLeapYear(); //使用工厂方法获取系统日期 LocalDate today = LocalDate.now(); LocalTime time = LocalTime.now().withNano(0);//去除毫秒 TemporalField 是一个接口, 定义了如何访问 temporal 对象某个字段的值. ChronoField 枚举实现这一接口.
int year = date.get(ChronoField.YEAR); int month = date.get(ChronoField.MONTH_OF_YEAR); int day = date.</description>
    </item>
    <item>
      <title>JSP 九大内置对象常用方法</title>
      <link>https://razielez.github.io/posts/jsp-%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Oct 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/jsp-%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>1. request 对象常用方法 request 是来自客户端的请求. 客户端的请求信息封装在 request 对象中. 以下 HttpServletRequest 类的实例.
方法 ( 类型 + 方法名 ) 描述 String getParameter(String strTextName) 获取表单提交信息 Enumeration getParameterNames() 返回可用参数的枚举 String[] getParameterValues(String name) 返回包含参数 name 的所有的数组 Enumeration getAttributeNames() 返回所有属性名的属性值 Object getAttribute(String name) 返回指定属性的属性值 String getCharacterEncoding() 返回字节编码方式 String getProtocol() 获取用户使用的协议 String getServletPath() 获取用户提交信息的页面 String getMethod() 获取客户提交信息的方式 BufferReader getHeader() 获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值 String getRemoteAddr() 获取客户的 IP 地址 String getRemoteHost() 获取客户机的名称 String getserverName() 获取服务器的名称 int getServerPort() 获取服务器端口号 2.</description>
    </item>
    <item>
      <title>位运算笔记</title>
      <link>https://razielez.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 01 Aug 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</guid>
      <description>位运算 &amp;amp; 、|、 ^ a &amp;amp; a = a a | a = a a ^ a = 0 a &amp;amp; 0 = 0 a | 0 = a a ^ 0 = a a | ( a &amp;amp; b ) = a a &amp;amp; ( a | b ) = a a、b值交换 a ^= b; b ^= a; a ^= b; 判断奇偶（取最后一位） a &amp;amp; 1 &amp;lt;==&amp;gt; a % 2 i+1位置为1 // 1110 =&amp;gt; 1111 a |= 1 &amp;lt;&amp;lt; i i+1位置为0 // 1111 =&amp;gt; 1101a &amp;amp;= ~(1 &amp;lt;&amp;lt; i) 取出i+1位 // i = 2, 7 =&amp;gt; 4 a = a &amp;amp; (1 &amp;lt;&amp;lt; i) 删除最后的1 // 1100 =&amp;gt; 1000 a = a &amp;amp; (a-1) 在对应i+1位，插入b的对应位 a |= 1 &amp;lt;&amp;lt; i; （a的bit位置1）a &amp;amp; (b &amp;amp; 1&amp;lt;&amp;lt;i) （与b的bit位相与） 得到最高位的1 a = a |(a&amp;gt;&amp;gt;1); a = a |(a&amp;gt;&amp;gt;2); a = a |(a&amp;gt;&amp;gt;4); a = a |(a&amp;gt;&amp;gt;8); a = a |(a&amp;gt;&amp;gt;16); return (a+1)&amp;gt;&amp;gt;1; 检测一个无符号整数是否是2^n -1的形式 x&amp;amp;(x+1) 移位 在Java中正数&amp;gt;&amp;gt;等价于&amp;gt;&amp;gt;&amp;gt;，负数在内存中已补码形式保存，&amp;gt;&amp;gt;&amp;gt;表示无符号右移。</description>
    </item>
    <item>
      <title>20行代码的签到脚本(Python)</title>
      <link>https://razielez.github.io/posts/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</guid>
      <description>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。
签到脚本 import requests username = &amp;#34;####&amp;#34; password = &amp;#34;####&amp;#34; loginUrl = &amp;#34;登录路径/auth/login&amp;#34; s = requests.Session() logindata = { &amp;#39;email&amp;#39;:username, &amp;#39;passwd&amp;#39;:password, &amp;#39;remember_me&amp;#39;:&amp;#39;ture&amp;#39;, } r = s.post(loginUrl,data=logindata) r = s.get(loginUrl) checkinUrl=&amp;#34;签到的路径/user/checkin&amp;#34; rr = s.post(checkinUrl)#执行签到 rr = s.get(loginUrl) # print(rr) # print(rr._content.decode()) exit() 在Linux上定时执行这个脚本 crontab -e 进入编辑模式，设置每天8:00运行一次。 crontab的语法规范 分钟 小时 日期 月份 周 命令
00 8 * * * python /opt/checkin.py </description>
    </item>
    <item>
      <title>Django重置后台密码</title>
      <link>https://razielez.github.io/posts/django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/</guid>
      <description>emmm时间长忘记密码了
执行 $ python manage.py shell 修改 In [1]: from django.contrib.auth.models import User In [2]: user = User.objects.get(username=&amp;#39;Username&amp;#39;) In [3]: user.set_password(&amp;#39;Password&amp;#39;) In [4]: user.save() In [5]: exit() </description>
    </item>
    <item>
      <title>lambda表达式</title>
      <link>https://razielez.github.io/posts/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>lambda表达式是一行函数，是函数式编程的一种特性。
python lambda &amp;lt;参数&amp;gt;: 表达式
&amp;gt;&amp;gt;&amp;gt; f = lambda a,b: a + b &amp;gt;&amp;gt;&amp;gt; type(f) #&amp;lt;type &amp;#39;function&amp;#39;&amp;gt; 获取整除2的数字
&amp;gt;&amp;gt;&amp;gt; list(filter(lambda x: x%2==0, range(10))) #[0, 2, 4, 6, 8] 列表并行排序
&amp;gt;&amp;gt;&amp;gt; list1 = [1,2,3,2,3];list2 = [9,4,3,5,6] &amp;gt;&amp;gt;&amp;gt; data = zip(list1, list2) &amp;gt;&amp;gt;&amp;gt; data = sorted(data) &amp;gt;&amp;gt;&amp;gt; list1, list2 = map(lambda t: list(t), zip(*data)) cpp c++里的形式是这样的 [capture list] (parameter list) -&amp;gt;return type {function body}
示例 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; int main() { //call the func.</description>
    </item>
    <item>
      <title>nothing added to commit but untracked files present解决方法</title>
      <link>https://razielez.github.io/posts/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 30 May 2018 17:05:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>问题描述 $ git commit On branch master Initial commit Untracked files: .gitignore Test/ blogpost/ manage.py nothing added to commit but untracked files present 文件被追踪，但是没有被添加git中
解决 git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件
$ git add manage.py $ git add blogpost\ $ git add Test\ $ git add .gitignore </description>
    </item>
    <item>
      <title>c&#43;&#43;枚举next_premutation</title>
      <link>https://razielez.github.io/posts/c&#43;&#43;%E6%9E%9A%E4%B8%BEnext_premutation/</link>
      <pubDate>Mon, 28 May 2018 10:39:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c&#43;&#43;%E6%9E%9A%E4%B8%BEnext_premutation/</guid>
      <description>平均复杂度即为O(n) next_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；
prev_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；
示例 #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; void f(vector&amp;lt;int&amp;gt; v){ for(int i=0;i&amp;lt;v.size();i++){ cout&amp;lt;&amp;lt;v[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; } int main() { vector&amp;lt;int&amp;gt; v; v.push_back(1); v.push_back(3); v.push_back(2); cout&amp;lt;&amp;lt;&amp;#34;原排列 ： &amp;#34;; f(v); for(int i=0;i&amp;lt;10;i++){ next_permutation(v.begin(),v.end());//升序序列 或者下一个排列次序 按照字典序生成下一个序列 f(v); } //for(int i=0;i&amp;lt;5;i++){ //	prev_permutation(v.begin(),v.end());//降序 //	f(v); //} return 0; } </description>
    </item>
    <item>
      <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
      <link>https://razielez.github.io/posts/ubuntu%E9%94%99%E8%AF%AF-could-not-get-lock-var-lib-dpkg-lock/</link>
      <pubDate>Tue, 15 May 2018 17:45:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/ubuntu%E9%94%99%E8%AF%AF-could-not-get-lock-var-lib-dpkg-lock/</guid>
      <description>报错信息 E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it? 解决办法 查看运行的线程 ps -A | grep apt-get # sudo kill processnumber # 关闭apt进程 我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的
终端输入 sudo rm /var/cache/apt/archives/lock sudo rm /var/lib/dpkg/lock </description>
    </item>
    <item>
      <title>c&#43;&#43; std::ios_base::sync_with_stdio 加速输入输出</title>
      <link>https://razielez.github.io/posts/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 14 May 2018 14:57:41 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>static bool sync_with_stdio( bool sync = true ); 设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。
遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。
测试 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; int main() { std::ios::sync_with_stdio(false); std::cout &amp;lt;&amp;lt; &amp;#34;a\n&amp;#34;; std::printf(&amp;#34;b\n&amp;#34;); std::cout &amp;lt;&amp;lt; &amp;#34;c\n&amp;#34;; } 输出 （环境 g++5.4.0） b c a 默认的情况下cin绑定的是cout，每次执行 &amp;laquo; 操作符的时候都要调用flush，这样会增加IO负担。
std::ios::sync_with_stdio(false); std::cin.tie(0); 参考一 ： http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
参考二 ：http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</description>
    </item>
    <item>
      <title>Windows10 WIFI 热点问题</title>
      <link>https://razielez.github.io/posts/window-wifi-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 08 May 2018 17:51:53 +0000</pubDate>
      <guid>https://razielez.github.io/posts/window-wifi-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98/</guid>
      <description>win10玄学bug之一
解决方案 ：
命令行输入
$ netsh wlan set hostednetwork mode=allow ssid=NAME key=PASSWORD $ netsh wlan start hostednetwork 然后在网络适配器的本地连接-&amp;gt;属性-&amp;gt;共享-&amp;gt;设置共享刚才设置的WIFI热点</description>
    </item>
    <item>
      <title>Python解决字符编码问题</title>
      <link>https://razielez.github.io/posts/python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 05 May 2018 22:33:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>字符串分为unicode 和 str 两种类型
文本字符和二进制数据分别用 str 和 byte表示
#系统默认编码设置为utf-8 &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; sys.getdefultencoding &amp;#39;utf-8&amp;#39; &amp;gt;&amp;gt;&amp;gt; str 与 bytes 之间的转换可以用 encode 和从decode
&amp;gt;&amp;gt;&amp;gt; s = &amp;#34;Python测试&amp;#34; &amp;gt;&amp;gt;&amp;gt; s = s.encode() &amp;gt;&amp;gt;&amp;gt; print(s) b&amp;#39;Python\xe6\xb5\x8b\xe8\xaf\x95&amp;#39; &amp;gt;&amp;gt;&amp;gt; s = s.decode() &amp;gt;&amp;gt;&amp;gt; print(s) &amp;#39;Python测试&amp;#39; base64 &amp;gt;&amp;gt;&amp;gt; import base64 &amp;gt;&amp;gt;&amp;gt; s = &amp;#34;asdasd&amp;#34; &amp;gt;&amp;gt;&amp;gt; s = base64.b64encode(s) &amp;gt;&amp;gt;&amp;gt; print(s) &amp;gt;&amp;gt;&amp;gt; s = base64.b64decode(s) &amp;gt;&amp;gt;&amp;gt; print(s) 参考 ： https://foofish.net/how-python3-handle-charset-encoding.html</description>
    </item>
    <item>
      <title>BFS</title>
      <link>https://razielez.github.io/posts/bfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:16:21 +0000</pubDate>
      <guid>https://razielez.github.io/posts/bfs/</guid>
      <description>入门 迷宫问题（最短路径） INPUT: 5 5SXXXX...XX.X.....XXX....G 6 6.......S..X.XXX.......X..X..XX.GX... OUPUT: 810 代码 #include &amp;lt;iostream&amp;gt; #include &amp;lt;queue&amp;gt; using namespace std; const int INF = 100000007; const int mx = 1007; typedef pair&amp;lt;int, int&amp;gt; P; char maze[mx][mx];//地图 int n, m; int sx, sy;//开始坐标 int gx, gy;//结束坐标 int d[mx][mx];//到各个位置的最短距离数组 int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};//移动向量 //（sx,sy)----&amp;gt;(gx,gy)最短路径 //无法到达就是 INF int bfs(){ queue&amp;lt;P&amp;gt; que; //初始化所有位置为INF for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ d[i][j]=INF; } } //放入起点 que.</description>
    </item>
    <item>
      <title>并查集</title>
      <link>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:19 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>题目 : L2-010. 排座位 布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。
输入格式： 输入第一行给出3个正整数：N（&amp;lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。
这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。
输出格式： 对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but&amp;hellip;”；如果他们之间只有敌对关系，则输出“No way”。
输入样例： 7 8 45 6 12 7 -11 3 13 4 16 7 -11 2 11 4 12 3 -13 45 72 37 2 输出样例： No problemOKOK but...No way /* 11 8 6 1 2 1 3 2 4 5 6 5 7 6 8 7 9 10 11 4 6 3 9 5 9 11 6 7 8 3 4 */ #include &amp;lt;iostream&amp;gt; using namespace std; int pre[100007];//节点 int enemy[1007][1007]; int find(int x) {//查找源头标号 int r = x; while (pre[r] !</description>
    </item>
    <item>
      <title>DFS</title>
      <link>https://razielez.github.io/posts/dfs/</link>
      <pubDate>Sun, 01 Apr 2018 18:15:02 +0000</pubDate>
      <guid>https://razielez.github.io/posts/dfs/</guid>
      <description>入门 求连通块 INPUT : 1 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 OUTPUT : 0122 代码 #include &amp;lt;iostream&amp;gt; using namespace std; const int mx = 10007; int n, m; char field[mx][mx];//地图 void dfs(int x, int y){ field[x][y] = &amp;#39;*&amp;#39;;//替换现在位置 //遍历8个方向 for(int dx=-1;dx&amp;lt;=1;dx++){ for(int dy=-1;dy&amp;lt;=1;dy++){ int nx=x+dx, ny=y+dy; if(0&amp;lt;=nx&amp;amp;&amp;amp;nx&amp;lt;n&amp;amp;&amp;amp;0&amp;lt;=ny&amp;amp;&amp;amp;ny&amp;lt;m&amp;amp;&amp;amp;field[nx][ny]==&amp;#39;@&amp;#39;) dfs(nx,ny); } } return ; } void solve(){ int ans=0; for(int i=0;i&amp;lt;n;i++){ for(int j=0;j&amp;lt;m;j++){ //从@处开始遍历 if(field[i][j]==&amp;#39;@&amp;#39;){ dfs(i,j); ans++; }	} } cout&amp;lt;&amp;lt;ans; } int main() { cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; for(int i=0;i&amp;lt;n;i++){ scanf(&amp;#34;%s&amp;#34;,field[i]); }	solve(); return 0; } </description>
    </item>
    <item>
      <title>数论初步</title>
      <link>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Sun, 31 Dec 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</guid>
      <description>数论被“数学王子”高斯誉为整个数学王国的皇后
欧几里得算法 最大公约数 欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g
代码示例 //递归int gcd(int a, int b) {return b == 0 ? a : gcd(b, a % b);}//迭代int gcd(int a, int b) {while(b != 0) {int r = b;b = a % b;a = r;}return a;} 唯一分解定理 扩展欧几里得算法 题目
直线上的点。求直线ax+by+c=0上有多少整数点(x,y)满足x&amp;lt;-[x1, x2], y &amp;lt;- [y1, y2] 定理：若a和b为正整数，则存在整数x,y使得gcd(a,b)=ax+by
代码示例 void gcd(int a, int b, int&amp;amp; d, int&amp;amp; x, int&amp;amp; y) { if (!</description>
    </item>
    <item>
      <title>Git问题：Everything up-to-date解决</title>
      <link>https://razielez.github.io/posts/git%E9%97%AE%E9%A2%98everything-up-to-date%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sat, 04 Nov 2017 12:39:28 +0000</pubDate>
      <guid>https://razielez.github.io/posts/git%E9%97%AE%E9%A2%98everything-up-to-date%E8%A7%A3%E5%86%B3/</guid>
      <description>push代码时遇到提示：Everything up-to-date,无法push代码 原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。
解决 在stackoverflow有解决方案
创建分支 $ git branch newbranch#查看分支$ git branch 切换分支 $ git checkout newbranch 改动提交到新的分支 $ git add .$ git commit -a 合并到master $ git merge newbranch#查看冲突$ git diff push代码 $ git push -u origin master 删除分支 $ git branch -D newbranch 删除合并部分大写D改为小写d </description>
    </item>
    <item>
      <title>快速幂</title>
      <link>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Tue, 31 Oct 2017 18:57:58 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>快速幂 通常算法：
int Pow(int A, int n){if(n == 0) return 1;int rslt(1);for(int i(0); i &amp;lt; n; ++i)rslt *= A;return rslt;} 其复杂度是O(n)的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如1 000 000 000这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用int来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。 举个栗子： 一般解法： A^8 = A * A * A * A * A * A * A * A 总共需要7次乘法运算
平均分解： A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2 这样我们就只需要4次乘法运算</description>
    </item>
    <item>
      <title>conda常用操作(windows)</title>
      <link>https://razielez.github.io/posts/conda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 28 Oct 2017 10:22:46 +0000</pubDate>
      <guid>https://razielez.github.io/posts/conda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>管理conda 验证安装 $ conda --version 命令参阅可以用: conda &amp;ndash;help
将conda更新到最新 $ conda update conda#有最新选择yesProceed ([y]/n)? y 管理环境 创建环境 $ conda create --name snowflakes biopython#也可以指定python版本并安装Astroid和Babel$ conda create --name snowflakes python3.5 astroid babel 使用biopython创建一个snowflakes的环境
不指定目录即为默认目录/envs 使用环境 $ activate newen#切换回根目录$ deactivate 显示安装过的环境 $ conda info --envs 括号显示为当前环境 切换到另一个环境 $ activate another_environment 克隆删除环境 #克隆$ conda create --name flowers --clone snowflakes#删除$ conda remove --name flowers --all 管理Python 检查可安装的python版本 $ conda search --full-name python#列出包含python的所有包$ conda search python 安装python3环境并不覆盖python2 $ conda create --name snackes pyhton=3 包管理 看安装的包和版本列表 $ conda list 查找、安装、删除 $ conda search beautifulsoup4$ conda install --name snowflakes beautifulsoup4 #未指定位置安装在当前位置$ conda remove --name snowflakes beautifulsoup4 从Anaconda.</description>
    </item>
    <item>
      <title>初学使用Git</title>
      <link>https://razielez.github.io/posts/%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8git/</link>
      <pubDate>Tue, 24 Oct 2017 13:27:03 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8git/</guid>
      <description>Git使用规范流程 Git是一个源码管理系统 我采取ThoughtBot的Git使用规范流程
第一步：新建分支 每次开发新功能，都应该新建一个单独的分支。
#获取主干最新代码$ git checkout master$ git pull#新建开发分支$ git checkout -b afeature 第二步：提交分支commit 分支修改后，提交commit
#all为保存所有变化(包括新建、修改和删除)$ git add --all#查看发生变动的文件。$ git status#verbose会列出diff的结果$ git commit --verbose diff是Unix系统的一个很重要的工具程序，具体见：读懂diff - 阮一峰的网络日志 第三步：撰写提交信息 提交commit时，必须给出完整扼要的提交信息。以下是一个范本：
Persent-tense summary under 50 characters*More information about commit(under 72 characters)*More information about commit(under 72 characters)http://project.management-system.com/ticket/123 第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、需要注意的问题。最后，提供对应的网址。
第四步：与主干同步 $ git fetch orgin$ git rebase orgin/master 第五步：合并commit 分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个(或最多两三个) commit，这样不仅清晰，也容易管理。</description>
    </item>
    <item>
      <title>通向外网的梯子</title>
      <link>https://razielez.github.io/posts/%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90/</link>
      <pubDate>Sun, 22 Oct 2017 21:15:07 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90/</guid>
      <description> 机场最为方便 v2ray适合自建 &amp;hellip; </description>
    </item>
    <item>
      <title>Jupyter NoteBook常用快捷键</title>
      <link>https://razielez.github.io/posts/jupyter-notebook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sat, 21 Oct 2017 15:39:41 +0000</pubDate>
      <guid>https://razielez.github.io/posts/jupyter-notebook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Jupyter Notebook 有两种键盘输入模式，命令模式和编辑模式。与Vim类似。
命令模式按Esc进入，编辑模式按Enter进入
命令模式快捷键 快捷键 作用 Shift+Enter 运行本单元，选中下一个单元 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Y 单元转入代码状态 M 单元转入markdown状态 R 单元转入raw状态 Up&amp;amp;K/Down&amp;amp;J 选中上方/下方单元 Shift+K/J 连续选择上方/下方单元 A/B 在上方/下方插入新单元 x/C 剪切/复制选中单元 Shift+V/V 粘贴到上方/下方单元 Z 恢复删除的最后一个单元 DD 删除选中的单元 Shift+M 合并选中的单元 Ctrl+S/S 保存当前文件 L 开关行号 O 转换输出 Shift+O 转换输出滚动 Esc/Q 关闭页面 H 显示快捷帮助 II/00 中断/重启NOteBook内核 Shift+Space/Space 向上/下滚动 编辑模式快捷键 快捷键 作用 Tab 代码补全或者缩进 Shift+Tab 提示 Ctrl+] 向右缩进 Ctrl+[ 向左缩进 Ctrl+Shift+Z/Ctrl+Y 重做 Ctrl+up/down 跳到单元开头/末尾 Ctrl+Left/Right 跳到左边/右边一个字首 Ctrl+BackSpace/Delete 删除前面一个字 Shift+Enter 运行本单元，选中下一个单元 Ctrl+M 切换到命令模式 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Ctrl+/ 注释整行或者取消注释 </description>
    </item>
    <item>
      <title>Windows上好用的软件</title>
      <link>https://razielez.github.io/posts/windows%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Sat, 14 Oct 2017 23:15:47 +0000</pubDate>
      <guid>https://razielez.github.io/posts/windows%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</guid>
      <description>Wox **Wox：**是开源免费强大的快捷启动器辅助工具，快速高效率打开软件,搜索文件 打开输入框：alt + space
同类软件也有: ** Listary** , Rolan 包管理工具 **Chocolatey：**如果你认为没有包管理的操作系统是反人类的就用这个吧，Chocolatey 这套包管理系统目前已经包含了近 500 多款常用软件，常用的有Sublime text,git,Google Chrome······
命令行工具 MobaXterm, 功能强大 cmder： 不多说，windows命令行神器，支持tab补全，支持了大部分的Linux命令······
文本编辑器 Sublime text3：基于 Python 语言的外挂 API,跨平台（Windows、Linux 和 Mac OS X）,兼容 TextMate 的语言标记语法。关于软件的配置方面见：这里 sublime text 3 3143 license
—– BEGIN LICENSE —–TwitterInc200 User LicenseEA7E-8900071D77F72E 390CDD93 4DCBA022 FAF6079061AA12C0 A37081C5 D0316412 4584D13694D7F7D4 95BC8C1C 527DA828 560BB037D1EDDD8C AE7B379F 50C9D69D B35179EF2FE898C4 8E4277A8 555CE714 E1FB0E43D5D52613 C3D12E98 BC49967F 7652EED29D2D2E61 67610860 6D338B72 5CF95C69E36B85CC 84991F19 7575D828 470A92AB—— END LICENSE —— 同类也有： **VS Code：**毕竟宇宙级的 **Atom：**Atom是由GitHub开发的自由及开放源代码的文字与代码编辑器，支持OS X、Windows和Linux操作系统，支持Node.</description>
    </item>
    <item>
      <title>c&#43;&#43;的字符串与数字的转换</title>
      <link>https://razielez.github.io/posts/c&#43;&#43;%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/c&#43;&#43;%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>数字转字符串 #include &amp;lt;sstream&amp;gt; double a = 123.456; string s; stringstream ss; ss &amp;lt;&amp;lt; a; ss &amp;gt;&amp;gt; s; ss.clear(); #include &amp;lt;map&amp;gt; map&amp;lt;int, char&amp;gt; m; for (int i = 0; i &amp;lt; 10; i++) { m[i] = i + &amp;#39;0&amp;#39;; } #include &amp;lt;cstdio&amp;gt; char str[10]; double a = 123.456; sprintf(str, &amp;#34;%.3lf&amp;#34;, a); char str[10]; int a=175; sprintf(str,&amp;#34;%x&amp;#34;,a);//10进制转换成16进制，如果输出大写的字母是sprintf(str,&amp;#34;%X&amp;#34;,a) 字符串转数字 #include &amp;lt;sstream&amp;gt; string s = &amp;#34;123.456&amp;#34;; double a; stringstream ss; ss &amp;lt;&amp;lt; s; ss &amp;gt;&amp;gt; a; ss.</description>
    </item>
    <item>
      <title>django链接MySQL问题</title>
      <link>https://razielez.github.io/posts/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/</guid>
      <description>错误 （django.db.utils.OperationalError: (1045, &amp;#34;Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password: NO)&amp;#34;)） 环境： Django2.0 MySQL8.0.11 Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。
解决: $ mysql -u root -p mysql&amp;gt; use mysql; mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;password&amp;#39;; </description>
    </item>
    <item>
      <title>scanf中的正则表达式</title>
      <link>https://razielez.github.io/posts/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>调用格式: scanf(&amp;quot;&amp;lt;格式化字符串&amp;gt;&amp;quot;, &amp;lt;地址表&amp;gt;); 一、为变量赋值时表示成功读取变量的个数, &amp;lt;格式化字符串&amp;gt;与&amp;lt;地址表&amp;gt;是严格匹配的
scanf(&amp;#34;%c %c&amp;#34;, &amp;amp;a, &amp;amp;b); //函数返回值是2，并丢弃不想使用的空白符 scanf(&amp;#34;%d,%d&amp;#34;, &amp;amp;a, &amp;amp;b); //输入必须有逗号， 多个空格为一个空格 二、 %s 读取遇到空格停止读取，因此一般可以用fgets去读取字符串
scanf(&amp;#34;%[a-z]&amp;#34;, &amp;amp;str); //遇到不再a-z字符停止读取 scanf(&amp;#34;666%[0-9]&amp;#34;, &amp;amp;str); //666开头并且在0-9字符读取，不是则停止 scanf(&amp;#34;%[^\n]&amp;#34;, &amp;amp;str); //^表示求反集，即这句话不是回车一直开始读取 三、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。
scanf(&amp;#34;%c%*c, &amp;amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。 更多正则表达式语言参考
sscanf、scanf的一些示例 </description>
    </item>
    <item>
      <title>数据库事务</title>
      <link>https://razielez.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://razielez.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务 数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。
特性 事务应该具有4个属性：原子性、一致性、隔离性、持久性。
原子性（Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。
一致性（Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。
隔离性（Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。
持久性（Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。
分类 扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。
隔离级别 未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据 提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读) 可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读 串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞 隔离级别 脏读 丢失更新 不可重复读 幻读 并发模型 更新冲突检测 未提交读：Read Uncommited √ √ √ √ 悲观 × 已提交读：Read commited × × √ √ 悲观 × 可重复读：Repeatable Read × × × √ 悲观 × 可串行读：Serializable × × × × 悲观 × 接下来详细解释，假设有下面两个事务同时执行：
begin; -- 事务1 insert into table1 (somevaue); -- 随意写的伪sql update table2 set aa = aa + 1 where id = 1; commit; begin; -- 事务2 select count(*) from table1; -- 第一次读count select aa from table2 where id = 1; -- 第一次读aa -- 假设在这个点 事务1成功提交 select count(*) from table1; -- 第二次读count select aa from table2 where id = 1; -- 第二次读aa commit; 串行化不用解释了，依次执行，不会产生冲突。</description>
    </item>
  </channel>
</rss>
